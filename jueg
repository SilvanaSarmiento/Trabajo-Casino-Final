import * as readlineSync from "readline-sync";

class Juego {
    protected nombre: string;
    protected apuestaMinima: number;
    protected saldo: number;

    constructor(nombre: string, apuestaMinima: number, saldo: number) {
        this.nombre = nombre;
        this.apuestaMinima = apuestaMinima;
        this.saldo = saldo;
    }

    public getSaldo(): number {
        return this.saldo;
    }

    public getApuestaMinima(): number {
        return this.apuestaMinima;
    }

    public realizarApuesta(cantidad: number): boolean {
        if (cantidad < this.apuestaMinima || cantidad > this.saldo) {
            console.log(`La apuesta debe estar entre $${this.apuestaMinima} y tu saldo disponible ($${this.saldo}).`);
            return false;
        }
        this.saldo -= cantidad;
        return true;
    }
}

export class Ruleta extends Juego {
    private colores: string[] = [];

    constructor(saldo: number) {
        super("Ruleta", 10, saldo);
        this.colores = this.generarColores();
    }

    // M√©todo para asignar colores a los n√∫meros de la ruleta
    private generarColores(): string[] {
        const colores: string[] = [];
        for (let i = 0; i <= 36; i++) {
            if (i === 0) {
                colores.push("verde");
            } else if (i % 2 === 0) {
                colores.push("negro");
            } else {
                colores.push("rojo");
            }
        }
        return colores;
    }

    // M√©todo principal para jugar una ronda
    public jugarRondaInteractiva(): void {
        console.log(`Tu saldo actual es: $${this.saldo.toFixed(2)}`);
        const apuestaMinima = this.getApuestaMinima();

        // Solicitar apuesta
        let apuesta = parseFloat(readlineSync.question(`Ingresa tu apuesta (m√≠nimo $${apuestaMinima}): `));
        while (isNaN(apuesta) || apuesta < apuestaMinima || apuesta > this.saldo) {
            console.log(`Apuesta inv√°lida. Ingresa un monto entre $${apuestaMinima} y tu saldo disponible ($${this.saldo.toFixed(2)}).`);
            apuesta = parseFloat(readlineSync.question(`Ingresa tu apuesta (m√≠nimo $${apuestaMinima}): `));
        }

        // Solicitar el n√∫mero al que apuesta
        let numeroApostado = parseInt(readlineSync.question("Elige un n√∫mero entre 0 y 36: "));
        while (isNaN(numeroApostado) || numeroApostado < 0 || numeroApostado > 36) {
            console.log("N√∫mero inv√°lido. Debe ser un valor entre 0 y 36.");
            numeroApostado = parseInt(readlineSync.question("Elige un n√∫mero entre 0 y 36: "));
        }

        // Girar la ruleta
        const resultado = Math.floor(Math.random() * 37);
        const color = this.colores[resultado];
        console.log(`La ruleta cay√≥ en el n√∫mero ${resultado} (${color}).`);

        // Verificar si el jugador gan√≥
        if (numeroApostado === resultado) {
            const premio = apuesta * 35;
            this.saldo += premio;
            console.log(`¬°Felicidades, ganaste! üéâ Tu premio es $${premio}.`);
        } else {
            this.saldo -= apuesta;
            console.log("Lo siento, perdiste esta ronda.");
        }
    }
}

// Funci√≥n para iniciar el juego de Ruleta
export function iniciarJuegoRuleta(): void {
    console.log("¬°Bienvenido al juego de Ruleta! üé°");

    // Configuraci√≥n inicial del saldo
    let saldo = parseFloat(readlineSync.question("Ingresa tu saldo inicial: "));
    while (isNaN(saldo) || saldo <= 0) {
        console.log("Por favor, ingresa un saldo v√°lido.");
        saldo = parseFloat(readlineSync.question("Ingresa tu saldo inicial: "));
    }

    const ruleta = new Ruleta(saldo);
    let seguirJugando = true;

    while (seguirJugando && ruleta.getSaldo() > 0) {
        ruleta.jugarRondaInteractiva();

        // Verificar si el jugador tiene saldo suficiente
        if (ruleta.getSaldo() <= 0) {
            console.log("‚ùå Te has quedado sin saldo suficiente para seguir jugando.");
            break;
        }

        const jugarOtraVez = readlineSync.question("¬øQuieres jugar otra vez? (s/n): ");
        seguirJugando = jugarOtraVez.toLowerCase() === "s";
    }

    console.log(`üëã ¬°Gracias por jugar! Tu saldo final es $${ruleta.getSaldo().toFixed(2)}.`);
}

// Iniciar el juego
iniciarJuegoRuleta();


